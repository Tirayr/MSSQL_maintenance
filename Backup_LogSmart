--variable declaration
DECLARE 
	@ver nvarchar(128),
	@logthreshold int=0,
	@log_since_last_log_backup_mb decimal(10,2),
	@sql nvarchar(max),
	@sSQL nvarchar(max),
	@rval int,
	@ParmDefinition nvarchar(max),
	@dbname NVARCHAR(100), 
	@fPath NVARCHAR(256) ,
	@fName NVARCHAR(256) ,
	@Date VARCHAR(40) ,
	@value varchar(10)
 
--Checking the SQL Server versioni using serverproperty
 
SET @ver = CAST(serverproperty('ProductVersion') AS nvarchar)
SET @ver = SUBSTRING(@ver, 1, CHARINDEX('.', @ver) - 1)
SET @ParmDefinition = N'@retvalOUT int OUTPUT';
 
IF ( @ver = '14' )
BEGIN
	 -- backup directory
	SET @fpath = 'C:\MSSQL_Backups\'  
	-- filename format
	SELECT @Date = REPLACE(CONVERT(VARCHAR(30),GETDATE(),126),':','_') 
	--Declare the cursor 
		DECLARE database_cursor CURSOR READ_ONLY FOR  
		SELECT 
			name, 
			convert(decimal(10,2),log_since_last_log_backup_mb)
		FROM 
			sys.databases AS s
			CROSS APPLY sys.dm_db_log_stats(s.database_id) 
		where  
			s.state_Desc='ONLINE' and recovery_model_desc='FULL' and name NOT IN ('master','model','msdb','tempdb')
 
		OPEN database_cursor   
		FETCH NEXT FROM database_cursor INTO @dbname,@log_since_last_log_backup_mb  
 
			WHILE @@FETCH_STATUS = 0   
			BEGIN   
    
				SET @fName = @fpath + @dbname + '_' + @date 
 
				--Initiate Log backup based on the defined threshold values
				SET @sSQL= 'IF ('+ cast(@log_since_last_log_backup_mb as varchar(10)) +'>='+cast(@logthreshold as varchar(10))+')
				BACKUP log '+@dbname +' TO DISK ='''+ @fName+'_log.bak'''
 
				--Print the SQL
				print @sSQL
				--Execute the dynamic SQL
				EXEC sp_executesql @sSQL			
 
		FETCH NEXT FROM database_cursor INTO @dbname, @log_since_last_log_backup_mb  
		END   
 
 
		CLOSE database_cursor   
		DEALLOCATE database_cursor
 
END
